{"version":3,"file":"static/js/369.738d0c33.chunk.js","mappings":"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","sources":["shared/constants/quizData.ts","pages/CreateQuiz/component/CreateForm.tsx","pages/CreateQuiz/CreateQuiz.tsx","pages/CreateQuiz/hooks/useQuizValidation.ts","pages/CreateQuiz/hooks/useHandlers.ts","services/localStorageService.ts","shared/constants/LocalStorageKeys.ts","shared/constants/RequestState.ts","shared/helpers/randomDelay.ts"],"sourcesContent":["import type { TQuizFormValues } from '../types';\n\nexport const categories = ['Frontend', 'Backend', 'Devops'] as const;\n\nexport const difficulties = ['simple', 'medium', 'difficult'] as const;\n\nexport const initialValues: TQuizFormValues = {\n  title: '',\n  timeLimit: 1,\n  category: categories[0],\n  difficulty: difficulties[0],\n  custom: true,\n  questions: [\n    {\n      id: 1,\n      text: '',\n      options: [{ id: 1, text: '' }],\n      correct_answers: [],\n    },\n  ],\n};\n","import { ErrorMessage, Field, FieldArray, Form, useFormikContext } from 'formik';\nimport { categories, difficulties } from '../../../shared/constants/quizData';\n\nimport React from 'react';\nimport type { TQuizFormValues } from '../../../shared/types';\n\nconst CreateForm: React.FC = () => {\n  const { values, setFieldValue } = useFormikContext<TQuizFormValues>();\n\n  const handleAddOption = (qIndex: number, pushOption: (obj: { id: number; text: string }) => void) => {\n    const newOptionId = values.questions[qIndex].options.length + 1;\n    pushOption({ id: newOptionId, text: '' });\n  };\n\n  const handleRemoveOption = (qIndex: number, oIndex: number, removeOption: (index: number) => void) => {\n    removeOption(oIndex);\n  };\n\n  const handleAddQuestion = (\n    push: (obj: {\n      id: number;\n      text: string;\n      options: { id: number; text: string }[];\n      correct_answers: number[];\n    }) => void,\n  ) => {\n    push({\n      id: values.questions.length + 1,\n      text: '',\n      options: [{ id: 1, text: '' }],\n      correct_answers: [],\n    });\n  };\n\n  const handleRemoveQuestion = (qIndex: number, remove: (index: number) => void) => {\n    remove(qIndex);\n  };\n\n  const handleCorrectAnswerChange = (e: React.ChangeEvent<HTMLInputElement>, qIndex: number, oId: number) => {\n    const { checked } = e.target;\n    const correctAnswers = values.questions[qIndex].correct_answers;\n    if (checked) {\n      setFieldValue(`questions.${qIndex}.correct_answers`, [...correctAnswers, oId]);\n    } else {\n      setFieldValue(\n        `questions.${qIndex}.correct_answers`,\n        correctAnswers.filter(id => id !== oId),\n      );\n    }\n  };\n\n  return (\n    <Form className='p-4 max-w-[800px] mx-auto'>\n      <div className='mb-4'>\n        <label className='block text-gray-700'>Title</label>\n        <Field type='text' name='title' className='w-full px-3 py-2 border rounded' />\n        <ErrorMessage name='title' component='div' className='text-red-500' />\n      </div>\n      <div className='mb-4'>\n        <label className='block text-gray-700'>Time Limit (minutes)</label>\n        <Field type='number' name='timeLimit' className='w-full px-3 py-2 border rounded' />\n        <ErrorMessage name='timeLimit' component='div' className='text-red-500' />\n      </div>\n      <div className='mb-4'>\n        <label className='block text-gray-700'>Category</label>\n        <Field as='select' name='category' className='w-full px-3 py-2 border rounded'>\n          {categories.map(category => (\n            <option key={category} value={category}>\n              {category}\n            </option>\n          ))}\n        </Field>\n        <ErrorMessage name='category' component='div' className='text-red-500' />\n      </div>\n      <div className='mb-4'>\n        <label className='block text-gray-700'>Difficulty</label>\n        <Field as='select' name='difficulty' className='w-full px-3 py-2 border rounded'>\n          {difficulties.map(difficulty => (\n            <option key={difficulty} value={difficulty}>\n              {difficulty}\n            </option>\n          ))}\n        </Field>\n        <ErrorMessage name='difficulty' component='div' className='text-red-500' />\n      </div>\n      <FieldArray name='questions'>\n        {({ push, remove }) => (\n          <div className='mb-4'>\n            <h3 className='text-xl font-semibold mb-2'>Questions</h3>\n            {values.questions.map((question, qIndex) => (\n              <div key={qIndex} className='mb-4 p-4 border rounded'>\n                <label className='block text-gray-700'>Question {qIndex + 1}</label>\n                <Field type='text' name={`questions.${qIndex}.text`} className='w-full px-3 py-2 border rounded mb-2' />\n                <ErrorMessage name={`questions.${qIndex}.text`} component='div' className='text-red-500' />\n                <h4 className='text-lg font-semibold mb-2'>Options</h4>\n                <FieldArray name={`questions.${qIndex}.options`}>\n                  {({ push: pushOption, remove: removeOption }) => (\n                    <div>\n                      {question.options.map((option, oIndex) => (\n                        <div key={oIndex}>\n                          <div className='flex items-center mb-2'>\n                            <Field\n                              type='text'\n                              name={`questions.${qIndex}.options.${oIndex}.text`}\n                              className='w-full px-3 py-2 border rounded mr-2'\n                            />\n                            <Field\n                              type='checkbox'\n                              name={`questions.${qIndex}.correct_answers`}\n                              value={String(option.id)}\n                              checked={values.questions[qIndex].correct_answers.includes(option.id)}\n                              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                handleCorrectAnswerChange(e, qIndex, option.id)\n                              }\n                              className='form-checkbox'\n                            />\n                            <button\n                              type='button'\n                              onClick={() => handleRemoveOption(qIndex, oIndex, removeOption)}\n                              className='ml-2 text-red-500 hover:text-red-700'>\n                              Remove Option\n                            </button>\n                          </div>\n                          <ErrorMessage\n                            name={`questions.${qIndex}.options.${oIndex}.text`}\n                            component='div'\n                            className='text-red-500'\n                          />\n                        </div>\n                      ))}\n                      <ErrorMessage\n                        name={`questions.${qIndex}.correct_answers`}\n                        component='div'\n                        className='text-red-500'\n                      />\n                      <button\n                        type='button'\n                        onClick={() => handleAddOption(qIndex, pushOption)}\n                        className='mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600'>\n                        Add Option\n                      </button>\n                    </div>\n                  )}\n                </FieldArray>\n                <button\n                  type='button'\n                  onClick={() => handleRemoveQuestion(qIndex, remove)}\n                  className='mt-2 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600'>\n                  Remove Question\n                </button>\n              </div>\n            ))}\n            <button\n              type='button'\n              onClick={() => handleAddQuestion(push)}\n              className='mt-4 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600'>\n              Add Question\n            </button>\n          </div>\n        )}\n      </FieldArray>\n      <button type='submit' className='mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600'>\n        Create Quiz\n      </button>\n    </Form>\n  );\n};\n\nexport default CreateForm;\n","import { Header, Loader } from '../../shared/components';\nimport { useHandlers, useQuizValidation } from './hooks';\n\nimport CreateForm from './component/CreateForm';\nimport { Formik } from 'formik';\nimport React from 'react';\nimport { RequestState } from '../../shared/constants/RequestState';\nimport type { TQuizFormValues } from '../../shared/types';\nimport { initialValues } from '../../shared/constants/quizData';\n\nconst CreateQuiz: React.FC = () => {\n  const validationSchema = useQuizValidation();\n  const { handleSubmit, requestStatus } = useHandlers();\n\n  return (\n    <div>\n      <Header title='Create Quiz Page' />\n      <Formik<TQuizFormValues>\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}>\n        <CreateForm />\n      </Formik>\n      {requestStatus === RequestState.Pending && <Loader />}\n    </div>\n  );\n};\n\nexport default CreateQuiz;\n","import * as Yup from 'yup';\n\nimport { categories, difficulties } from '../../../shared/constants/quizData';\n\nimport { useMemo } from 'react';\n\nexport function useQuizValidation() {\n  return useMemo(() => {\n    return Yup.object({\n      title: Yup.string().required('Title is required'),\n      timeLimit: Yup.number().required('Time limit is required').positive('Must be positive'),\n      category: Yup.string().oneOf(categories).required('Category is required'),\n      difficulty: Yup.string().oneOf(difficulties).required('Difficulty is required'),\n      questions: Yup.array()\n        .of(\n          Yup.object({\n            text: Yup.string().required('Question is required'),\n            options: Yup.array()\n              .of(\n                Yup.object({\n                  text: Yup.string().required('Question is required'),\n                }),\n              )\n              .min(1, 'Must have at least one option')\n              .required('Question is required'),\n            correct_answers: Yup.array()\n              .of(Yup.number())\n              .min(1, 'Must have at least one correct answer')\n              .required('Must have at least one correct answer'),\n          }),\n        )\n        .min(1, 'Must have at least one question'),\n    });\n  }, []);\n}\n","import { useCallback, useState } from 'react';\n\nimport { AbsoluteRoutes } from '../../../shared/constants/AbsoluteRoutes';\nimport { LocalStorageKeys } from '../../../shared/constants/LocalStorageKeys';\nimport { LocalStorageService } from '../../../services/localStorageService';\nimport { RequestState } from '../../../shared/constants/RequestState';\nimport type { TQuizFormValues } from '../../../shared/types';\nimport { requestDelay } from '../../../shared/helpers/randomDelay';\nimport { useNavigate } from 'react-router-dom';\n\nexport function useHandlers() {\n  const [requestStatus, setStatus] = useState<RequestState>(RequestState.Idle);\n  const navigate = useNavigate();\n\n  const handleSubmit = useCallback(\n    async (values: TQuizFormValues) => {\n      setStatus(RequestState.Pending);\n      try {\n        await new Promise<void>((resolve, reject) => {\n          setTimeout(() => {\n            try {\n              const storedQuizzes = LocalStorageService.getItem(LocalStorageKeys.Quizzes);\n              const quizzes = storedQuizzes ? (JSON.parse(storedQuizzes) as TQuizFormValues[]) : [];\n              const newQuizzes = [...quizzes, values];\n              LocalStorageService.setItem(LocalStorageKeys.Quizzes, JSON.stringify(newQuizzes));\n              setStatus(RequestState.Success);\n              resolve();\n            } catch (error) {\n              console.error('Error while saving quiz:', error);\n              setStatus(RequestState.Error);\n              reject(error);\n            }\n          }, requestDelay);\n        });\n        navigate(AbsoluteRoutes.HOME);\n      } catch (error) {\n        console.error('Error while saving quiz:', error);\n        throw error;\n      }\n    },\n    [navigate],\n  );\n\n  return { handleSubmit, requestStatus };\n}\n","import { LocalStorageKeys } from '../shared/constants/LocalStorageKeys';\n\nexport class LocalStorageService {\n  public static setItem<T>(key: LocalStorageKeys, value: T): void {\n    return localStorage.setItem(key, convertDataForSaveStorage(value));\n  }\n\n  public static getItem(key: LocalStorageKeys): string | null {\n    return localStorage.getItem(key);\n  }\n\n  public static removeItem(key: LocalStorageKeys): void {\n    localStorage.removeItem(key);\n  }\n\n  public static clear(): void {\n    localStorage.clear();\n  }\n}\n\nfunction convertDataForSaveStorage<T>(value: T): string {\n  if (value === null && value === undefined) {\n    return '';\n  } else if (typeof value === 'string') {\n    return value;\n  } else {\n    return JSON.stringify(value);\n  }\n}\n","export enum LocalStorageKeys {\n  Answers = 'answers',\n  Quizzes = 'quizzes',\n}\n","export enum RequestState {\n  Idle = 'Idle',\n  Pending = 'Pending',\n  Success = 'Success',\n  Error = 'Error',\n}\n","function getRandomDelay(minDelay: number, maxDelay: number): number {\n  return Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay;\n}\n\nexport const requestDelay = getRandomDelay(500, 2000);\n"],"names":["categories","difficulties","initialValues","title","timeLimit","category","difficulty","custom","questions","id","text","options","correct_answers","CreateForm","values","setFieldValue","useFormikContext","_jsxs","Form","className","children","_jsx","Field","type","name","ErrorMessage","component","as","map","value","FieldArray","_ref","push","remove","question","qIndex","concat","_ref2","pushOption","removeOption","option","oIndex","String","checked","includes","onChange","e","handleCorrectAnswerChange","oId","target","correctAnswers","filter","onClick","handleRemoveOption","handleAddOption","length","handleRemoveQuestion","handleAddQuestion","CreateQuiz","validationSchema","useMemo","Yup","required","positive","oneOf","of","min","handleSubmit","requestStatus","setStatus","useState","RequestState","Idle","navigate","useNavigate","useCallback","async","Pending","Promise","resolve","reject","setTimeout","storedQuizzes","LocalStorageService","getItem","LocalStorageKeys","Quizzes","newQuizzes","JSON","parse","setItem","stringify","Success","error","console","Error","requestDelay","AbsoluteRoutes","HOME","useHandlers","Header","Formik","onSubmit","Loader","key","localStorage","undefined","convertDataForSaveStorage","removeItem","clear","minDelay","maxDelay","Math","floor","random"],"sourceRoot":""}