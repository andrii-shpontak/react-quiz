{"version":3,"file":"static/js/283.d2ad78fe.chunk.js","mappings":"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","sources":["pages/Quiz/components/QuizResultsModal.tsx","pages/Quiz/components/TimeRemaining.tsx","shared/hooks/useCountdown.ts","shared/constants/LocalStorageKeys.ts","services/localStorageService.ts","pages/Quiz/hooks/useQuestionHandlers.ts","shared/helpers/timeHelpers.ts","pages/Quiz/components/QuestionCard.tsx","pages/Quiz/components/QuizPreview.tsx","pages/Quiz/components/QuizInProcess.tsx","pages/Quiz/view/Quiz.tsx","pages/Quiz/hooks/useData.ts"],"sourcesContent":["import { AbsoluteRoutes } from '../../../shared/constants/AbsoluteRoutes';\nimport { TAnswersObject } from '../../../shared/types';\nimport { useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst QuizResultsModal = ({ endResult }: { endResult: TAnswersObject }) => {\n  const { elapsedTime, answers } = endResult;\n  const navigate = useNavigate();\n\n  const correctAnswers: number = useMemo(() => {\n    let correctAnswersCounter = 0;\n    for (let i = 0; i < answers.length; i++) {\n      answers[i].correct && correctAnswersCounter++;\n    }\n    return correctAnswersCounter;\n  }, [answers]);\n\n  const percentage = Math.round((correctAnswers / answers.length) * 100);\n\n  let percentageColor = '';\n\n  if (percentage >= 70) {\n    percentageColor = 'text-green-500';\n  } else if (percentage > 50) {\n    percentageColor = 'text-orange-500';\n  } else {\n    percentageColor = 'text-red-500';\n  }\n\n  const handleClose = () => {\n    navigate(AbsoluteRoutes.HOME);\n  };\n\n  return (\n    <div className='fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50'>\n      <div className='bg-white p-6 rounded-lg shadow-md w-full max-w-md'>\n        <h3 className='text-xl font-bold mb-4'>Quiz Results</h3>\n        <p className={`text-2xl font-bold mb-4 ${percentageColor}`}>Percentage: {percentage}%</p>\n        <p className='text-xl mb-4'>\n          Correct Answers: {correctAnswers} / {answers.length}\n        </p>\n        <p className='text-xl mb-4'>Time Taken: {elapsedTime} seconds</p>\n        <button onClick={handleClose} className='bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600'>\n          Close\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuizResultsModal;\n","import type { TTimeRemainingProps } from '../../../shared/types';\nimport { useCountdown } from '../../../shared/hooks/useCountdown';\n\n// need to process a case in which the time has already run out and the quiz has not yet been completed\n\nconst TimeRemaining = ({ timeLimit, isFinished }: TTimeRemainingProps) => {\n  const { minutesLeft, secondsLeft } = useCountdown(timeLimit, isFinished);\n\n  return (\n    <div className='flex justify-center items-center mt-4'>\n      <div className={`text-${isFinished ? 'green' : 'red'}-500 font-bold mb-4 text-2xl`}>\n        Time remaining: {minutesLeft}:{secondsLeft < 10 ? `0${secondsLeft}` : secondsLeft}\n      </div>\n    </div>\n  );\n};\n\nexport default TimeRemaining;\n","import { useEffect, useState } from 'react';\n\nexport function useCountdown(minutes: number, isFinished: boolean) {\n  const [timeLeft, setTimeLeft] = useState(minutes * 60);\n\n  useEffect(() => {\n    if (timeLeft <= 0 || isFinished) return;\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(prevTime => prevTime - 1);\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timeLeft, isFinished]);\n\n  const minutesLeft = Math.floor(timeLeft / 60);\n  const secondsLeft = timeLeft % 60;\n\n  return { minutesLeft, secondsLeft };\n}\n","export enum LocalStorageKeys {\n  Answers = 'answers',\n}\n","import { LocalStorageKeys } from '../shared/constants/LocalStorageKeys';\n\nexport class LocalStorageService {\n  public static setItem<T>(key: LocalStorageKeys, value: T): void {\n    return localStorage.setItem(key, convertDataForSaveStorage(value));\n  }\n\n  public static getItem(key: LocalStorageKeys): string | null {\n    return localStorage.getItem(key);\n  }\n\n  public static removeItem(key: LocalStorageKeys): void {\n    localStorage.removeItem(key);\n  }\n\n  public static clear(): void {\n    localStorage.clear();\n  }\n}\n\nfunction convertDataForSaveStorage<T>(value: T): string {\n  if (value === null && value === undefined) {\n    return '';\n  } else if (typeof value === 'string') {\n    return value;\n  } else {\n    return JSON.stringify(value);\n  }\n}\n","import type { TAnswer, TAnswersObject, TQuestionCardHandlersProps } from '../../../shared/types';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { LocalStorageKeys } from '../../../shared/constants/LocalStorageKeys';\nimport { LocalStorageService } from '../../../services/localStorageService';\nimport { getElapsedTime } from '../../../shared/helpers/timeHelpers';\n\nexport function useQuestionHandlers({\n  question,\n  questionNumber,\n  totalQuestions,\n  onNext,\n  quizTitle,\n}: TQuestionCardHandlersProps) {\n  const [selectedOption, setSelectedOption] = useState<number | null>(null);\n  const [isConfirmed, setIsConfirmed] = useState<boolean>(false);\n  const [isCorrect, setIsCorrect] = useState<boolean>(false);\n  const [answers, setAnswers] = useState<TAnswer[]>([]);\n  const [startTime, setStartTime] = useState<Date | null>(null);\n  const [endTime, setEndTime] = useState<Date | null>(null);\n  const [endResult, setResult] = useState<TAnswersObject | null>(null);\n\n  const handleOptionChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const value = event.target.value;\n      if (!isConfirmed && !!value) {\n        setSelectedOption(Number(value));\n      }\n    },\n    [setSelectedOption, isConfirmed],\n  );\n\n  const handleConfirm = useCallback(() => {\n    if (selectedOption !== null) {\n      const correct = question.correct_answers.includes(selectedOption);\n      setIsCorrect(correct);\n      setIsConfirmed(true);\n      setAnswers(state => [...state, { questionId: questionNumber, answerId: selectedOption, correct }]);\n      if (questionNumber === totalQuestions) {\n        setEndTime(new Date());\n      }\n    }\n  }, [setIsConfirmed, setIsCorrect, question, selectedOption, setAnswers, questionNumber, setEndTime, totalQuestions]);\n\n  const handleNextClick = useCallback(() => {\n    if (questionNumber === totalQuestions && !!startTime && !!endTime) {\n      const currentDate = new Date().toISOString().split('.')[0];\n      const elapsedTime = getElapsedTime(startTime, endTime);\n      const storedAnswers = LocalStorageService.getItem(LocalStorageKeys.Answers);\n      const existingAnswers = storedAnswers ? (JSON.parse(storedAnswers) as TAnswersObject[]) : [];\n      const currentQuizObj = { title: quizTitle, date: currentDate, elapsedTime, answers };\n      setResult(currentQuizObj);\n      const allAnswers = [...existingAnswers, currentQuizObj];\n      LocalStorageService.setItem(LocalStorageKeys.Answers, JSON.stringify(allAnswers));\n      return;\n    }\n    onNext();\n    setSelectedOption(null);\n    setIsConfirmed(false);\n    setIsCorrect(false);\n  }, [answers, questionNumber, totalQuestions, onNext, quizTitle, endTime, startTime]);\n\n  useEffect(() => {\n    if (!startTime) {\n      setStartTime(new Date());\n    }\n  }, [startTime]);\n\n  return {\n    isConfirmed,\n    isCorrect,\n    selectedOption,\n    handleOptionChange,\n    handleConfirm,\n    handleNextClick,\n    isFinished: !!endTime,\n    endResult,\n  };\n}\n","export function getElapsedTime(startTime: Date, endTime: Date): string {\n  const elapsedTimeInSeconds = startTime && endTime ? (endTime.getTime() - startTime.getTime()) / 1000 : 0;\n  const elapsedMinutes = Math.floor(elapsedTimeInSeconds / 60);\n  const elapsedSeconds = Math.floor(elapsedTimeInSeconds % 60);\n  return `${elapsedMinutes}:${elapsedSeconds < 10 ? '0' + elapsedSeconds : elapsedSeconds}`;\n}\n","import QuizResultsModal from './QuizResultsModal';\nimport React from 'react';\nimport type { TQuestionCardProps } from '../../../shared/types';\nimport TimeRemaining from './TimeRemaining';\nimport { useQuestionHandlers } from '../hooks/useQuestionHandlers';\n\nconst QuestionCard: React.FC<TQuestionCardProps> = ({\n  question,\n  questionNumber,\n  totalQuestions,\n  onNext,\n  quizTitle,\n  timeLimit,\n}) => {\n  const {\n    isConfirmed,\n    isCorrect,\n    selectedOption,\n    handleOptionChange,\n    handleConfirm,\n    handleNextClick,\n    isFinished,\n    endResult,\n  } = useQuestionHandlers({ question, questionNumber, totalQuestions, onNext, quizTitle });\n\n  return (\n    <>\n      <TimeRemaining timeLimit={timeLimit} isFinished={isFinished} />\n      <div\n        className={`p-6 rounded-lg shadow-md border w-full max-w-xl mx-auto ${\n          isConfirmed ? (isCorrect ? 'bg-green-100' : 'bg-red-100') : 'bg-white'\n        } mb-6`}>\n        <h3 className='text-xl font-bold mb-4'>\n          Question {questionNumber} of {totalQuestions}\n        </h3>\n        <p className='text-gray-800 mb-4'>{question.text}</p>\n        <ul>\n          {question.options.map(option => (\n            <li key={option.id} className='mb-2'>\n              <label className='flex items-center cursor-pointer w-full'>\n                <span\n                  className={`inline-block flex items-center p-2 border rounded-lg shadow-sm transition-colors ${\n                    selectedOption === option.id ? 'bg-gray-300' : 'bg-gray-100'\n                  } ${\n                    isConfirmed ? (selectedOption === option.id ? (isCorrect ? 'bg-green-100' : 'bg-red-100') : '') : ''\n                  } hover:bg-gray-200 w-full`}\n                  style={{ pointerEvents: isConfirmed ? 'none' : 'auto' }}>\n                  <input\n                    type='radio'\n                    name={`question-${question.id}`}\n                    value={option.id}\n                    checked={selectedOption === option.id}\n                    onChange={handleOptionChange}\n                    disabled={isConfirmed}\n                    className='mx-3'\n                  />\n                  {option.text}\n                </span>\n              </label>\n            </li>\n          ))}\n        </ul>\n        {!isConfirmed ? (\n          <button onClick={handleConfirm} className='bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 mt-4'>\n            Confirm\n          </button>\n        ) : (\n          <button onClick={handleNextClick} className='bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 mt-4'>\n            {questionNumber === totalQuestions ? 'Finish' : 'Next'}\n          </button>\n        )}\n      </div>\n\n      {!!endResult && <QuizResultsModal endResult={endResult} />}\n    </>\n  );\n};\n\nexport default QuestionCard;\n","import type { TQuizPreviewProps } from '../../../shared/types';\n\nconst QuizPreview = ({ quizInfo, startQuiz }: TQuizPreviewProps) => {\n  const { title, category, difficulty, timeLimit } = quizInfo;\n\n  return (\n    <div className='flex justify-center items-center mt-10'>\n      <div className='bg-white p-6 rounded-lg shadow-md border border-gray-200 w-96'>\n        <h2 className='text-2xl font-bold mb-4'>{title}</h2>\n        <p className='text-gray-700 mb-2'>Category: {category}</p>\n        <p className='text-gray-700 mb-2'>Difficulty: {difficulty}</p>\n        <p className='text-gray-700 mb-4'>Time limit: {timeLimit} minutes</p>\n        <button onClick={startQuiz} className='bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600'>\n          Start Quiz\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuizPreview;\n","import { useCallback, useMemo, useState } from 'react';\n\nimport QuestionCard from './QuestionCard';\nimport QuizPreview from './QuizPreview';\nimport type { TQuizInProcessProps } from '../../../shared/types';\n\nconst QuizInProcess = ({ quizInfo }: TQuizInProcessProps) => {\n  const [quizStatus, setQuizStatus] = useState({ inProcess: 0 });\n\n  const onNext = useCallback(() => {\n    setQuizStatus(state => {\n      return { inProcess: state.inProcess + 1 };\n    });\n  }, [setQuizStatus]);\n\n  const currentQuestion = useMemo(\n    () => quizInfo.questions.find(question => question.id === quizStatus.inProcess),\n    [quizInfo, quizStatus.inProcess],\n  );\n\n  return (\n    <>\n      {!!quizStatus.inProcess && !!currentQuestion ? (\n        <>\n          <QuestionCard\n            question={currentQuestion}\n            onNext={onNext}\n            questionNumber={quizStatus.inProcess}\n            totalQuestions={quizInfo.questions.length}\n            quizTitle={quizInfo.title}\n            timeLimit={quizInfo.timeLimit}\n          />\n        </>\n      ) : (\n        <QuizPreview quizInfo={quizInfo} startQuiz={onNext} />\n      )}\n    </>\n  );\n};\n\nexport default QuizInProcess;\n","import { Header, Loader } from '../../../shared/components';\n\nimport { QuizInProcess } from '../components';\nimport React from 'react';\nimport { RequestState } from '../../../shared/constants/RequestState';\nimport { useData } from '../hooks/useData';\nimport { useParams } from 'react-router-dom';\nimport { useQuizzesData } from '../../../shared/hooks/useQuizzesData';\n\nconst Quiz: React.FC = () => {\n  const { id } = useParams();\n  const { quizzesData, requestStatus } = useQuizzesData({});\n  const { currentQuiz } = useData({ id, data: quizzesData });\n\n  return (\n    <>\n      <Header title={!!id ? `Quiz #${id}` : ''} />\n      {requestStatus === RequestState.Pending && <Loader />}\n      {!!currentQuiz && <QuizInProcess quizInfo={currentQuiz} />}\n    </>\n  );\n};\n\nexport default Quiz;\n","import type { TQuiz, TQuizUseDataProps } from '../../../shared/types';\nimport { useEffect, useState } from 'react';\n\nexport function useData({ id, data }: TQuizUseDataProps) {\n  const [currentQuiz, setCurrentQuiz] = useState<TQuiz | null>(null);\n\n  useEffect(() => {\n    if (id && data && data.length > 0) {\n      const quiz = data.find(quiz => quiz.title === id);\n      !!quiz ? setCurrentQuiz(quiz) : console.error(`Quiz with id ${id} not found.`);\n    }\n  }, [data, id]);\n\n  return { currentQuiz };\n}\n"],"names":["_ref","endResult","elapsedTime","answers","navigate","useNavigate","correctAnswers","useMemo","correctAnswersCounter","i","length","correct","percentage","Math","round","percentageColor","_jsx","className","children","_jsxs","concat","onClick","handleClose","AbsoluteRoutes","HOME","timeLimit","isFinished","minutesLeft","secondsLeft","minutes","timeLeft","setTimeLeft","useState","useEffect","intervalId","setInterval","prevTime","clearInterval","floor","useCountdown","LocalStorageKeys","LocalStorageService","setItem","key","value","localStorage","undefined","JSON","stringify","convertDataForSaveStorage","getItem","removeItem","clear","useQuestionHandlers","question","questionNumber","totalQuestions","onNext","quizTitle","selectedOption","setSelectedOption","isConfirmed","setIsConfirmed","isCorrect","setIsCorrect","setAnswers","startTime","setStartTime","endTime","setEndTime","setResult","handleOptionChange","useCallback","event","target","Number","handleConfirm","correct_answers","includes","state","questionId","answerId","Date","handleNextClick","currentDate","toISOString","split","elapsedTimeInSeconds","getTime","elapsedMinutes","elapsedSeconds","getElapsedTime","storedAnswers","Answers","existingAnswers","parse","currentQuizObj","title","date","allAnswers","_Fragment","TimeRemaining","text","options","map","option","id","style","pointerEvents","type","name","checked","onChange","disabled","QuizResultsModal","quizInfo","startQuiz","category","difficulty","quizStatus","setQuizStatus","inProcess","currentQuestion","questions","find","QuestionCard","QuizPreview","Quiz","useParams","quizzesData","requestStatus","useQuizzesData","currentQuiz","data","setCurrentQuiz","quiz","console","error","useData","Header","RequestState","Pending","Loader","QuizInProcess"],"sourceRoot":""}