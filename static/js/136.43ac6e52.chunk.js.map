{"version":3,"file":"static/js/136.43ac6e52.chunk.js","mappings":"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","sources":["pages/Quizzes/Quizzes.tsx","shared/hooks/useQuizHistory.tsx","services/localStorageService.ts","shared/constants/LocalStorageKeys.ts","shared/constants/RequestState.ts","shared/helpers/getQuizResultData.ts","shared/helpers/randomDelay.ts"],"sourcesContent":["import { Header, Loader } from '../../shared/components';\nimport React, { useCallback, useState } from 'react';\n\nimport { RequestState } from '../../shared/constants/RequestState';\nimport { getQuizResultData } from '../../shared/helpers/getQuizResultData';\nimport { useQuizHistory } from '../../shared/hooks/useQuizHistory';\n\nconst Quizzes: React.FC = () => {\n  const [expandedQuizIndex, setExpandedQuizIndex] = useState<number | null>(null);\n\n  const { quizInHistory, requestStatus } = useQuizHistory();\n\n  const toggleExpand = useCallback(\n    (event: React.MouseEvent<HTMLDivElement>) => {\n      const index = event.currentTarget.getAttribute('data-index');\n      !!index && setExpandedQuizIndex(expandedQuizIndex === Number(index) ? null : Number(index));\n    },\n    [setExpandedQuizIndex, expandedQuizIndex],\n  );\n\n  return (\n    <>\n      <div>\n        <Header title='Quizzes History' />\n        {!!quizInHistory ? (\n          quizInHistory.map((quiz, index) => {\n            const { percentageColor, percentage, correctOfAll, elapsedTime } = getQuizResultData(quiz);\n            return (\n              <div key={index} className='border border-gray-200 rounded m-3'>\n                <div className='p-4 cursor-pointer' data-index={index} onClick={toggleExpand}>\n                  <h3 className='text-lg font-semibold'>{quiz.title}</h3>\n                </div>\n                <div className={`p-4 bg-gray-100 ${expandedQuizIndex === index ? '' : 'hidden'}`}>\n                  <p className='text-xl mb-2'>Date: {quiz.date}</p>\n                  <p className='text-xl mb-2'>Time Taken: {elapsedTime}</p>\n                  <p className={`text-xl font-bold mb-2 ${percentageColor}`}>Percentage: {percentage}%</p>\n                  <p className='text-xl mb-2'>Correct Answers: {correctOfAll}</p>\n                  <p className='text-xl mb-2'>Time Taken: {elapsedTime} seconds</p>\n                </div>\n              </div>\n            );\n          })\n        ) : (\n          <div className='m-3 p-4 border border-gray-200 rounded bg-yellow-100 text-yellow-800'>\n            <p className='text-lg'>You haven't completed any quizzes yet.</p>\n            <p>Start a quiz to see your history here.</p>\n          </div>\n        )}\n      </div>\n      {requestStatus === RequestState.Pending && <Loader />}\n    </>\n  );\n};\n\nexport default Quizzes;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport { LocalStorageKeys } from '../constants/LocalStorageKeys';\nimport { LocalStorageService } from '../../services/localStorageService';\nimport { RequestState } from '../constants/RequestState';\nimport type { TAnswersObject } from '../types';\nimport { requestDelay } from '../helpers/randomDelay';\n\nexport function useQuizHistory() {\n  const [quizInHistory, setQuizInHistory] = useState<TAnswersObject[] | null>(null);\n  const [requestStatus, setStatus] = useState<RequestState>(RequestState.Idle);\n\n  const getQuizHistory = useCallback(async () => {\n    setStatus(RequestState.Pending);\n    try {\n      const response = await new Promise<TAnswersObject[] | null>(resolve => {\n        const answerInStorage = LocalStorageService.getItem(LocalStorageKeys.Answers);\n        const storedAnswers = answerInStorage ? (JSON.parse(answerInStorage) as TAnswersObject[]) : null;\n        setTimeout(() => resolve(storedAnswers), requestDelay);\n      });\n\n      !!response && setQuizInHistory(response);\n      setStatus(RequestState.Success);\n    } catch (error) {\n      console.error('Failed to fetch quizzes:', error);\n      setStatus(RequestState.Error);\n    }\n  }, [setStatus, setQuizInHistory]);\n\n  useEffect(() => {\n    getQuizHistory();\n    // only when mounting the component\n    // eslint-disable-next-line\n  }, []);\n\n  return { quizInHistory, requestStatus };\n}\n","import { LocalStorageKeys } from '../shared/constants/LocalStorageKeys';\n\nexport class LocalStorageService {\n  public static setItem<T>(key: LocalStorageKeys, value: T): void {\n    return localStorage.setItem(key, convertDataForSaveStorage(value));\n  }\n\n  public static getItem(key: LocalStorageKeys): string | null {\n    return localStorage.getItem(key);\n  }\n\n  public static removeItem(key: LocalStorageKeys): void {\n    localStorage.removeItem(key);\n  }\n\n  public static clear(): void {\n    localStorage.clear();\n  }\n}\n\nfunction convertDataForSaveStorage<T>(value: T): string {\n  if (value === null && value === undefined) {\n    return '';\n  } else if (typeof value === 'string') {\n    return value;\n  } else {\n    return JSON.stringify(value);\n  }\n}\n","export enum LocalStorageKeys {\n  Answers = 'answers',\n  Quizzes = 'quizzes',\n}\n","export enum RequestState {\n  Idle = 'Idle',\n  Pending = 'Pending',\n  Success = 'Success',\n  Error = 'Error',\n}\n","import type { TAnswersObject, TGetQuizResultInfo } from '../types';\n\nexport function getQuizResultData(savedQuizObject: TAnswersObject): TGetQuizResultInfo {\n  const { elapsedTime, answers } = savedQuizObject;\n  let correctAnswers = 0;\n\n  for (let i = 0; i < answers.length; i++) {\n    answers[i].correct && correctAnswers++;\n  }\n\n  const percentage = Math.round((correctAnswers / answers.length) * 100);\n\n  const correctOfAll = `${correctAnswers} / ${answers.length}`;\n\n  let percentageColor = '';\n\n  switch (true) {\n    case percentage >= 70:\n      percentageColor = 'text-green-500';\n      break;\n    case percentage > 50:\n      percentageColor = 'text-orange-500';\n      break;\n    default:\n      percentageColor = 'text-red-500';\n      break;\n  }\n\n  return { percentageColor, percentage, correctOfAll, elapsedTime };\n}\n","function getRandomDelay(minDelay: number, maxDelay: number): number {\n  return Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay;\n}\n\nexport const requestDelay = getRandomDelay(500, 2000);\n"],"names":["Quizzes","expandedQuizIndex","setExpandedQuizIndex","useState","quizInHistory","requestStatus","setQuizInHistory","setStatus","RequestState","Idle","getQuizHistory","useCallback","async","Pending","response","Promise","resolve","answerInStorage","LocalStorageService","getItem","LocalStorageKeys","Answers","storedAnswers","JSON","parse","setTimeout","requestDelay","Success","error","console","Error","useEffect","useQuizHistory","toggleExpand","event","index","currentTarget","getAttribute","Number","_jsxs","_Fragment","children","_jsx","Header","title","map","quiz","percentageColor","percentage","correctOfAll","elapsedTime","getQuizResultData","className","onClick","concat","date","Loader","setItem","key","value","localStorage","undefined","stringify","convertDataForSaveStorage","removeItem","clear","savedQuizObject","answers","correctAnswers","i","length","correct","Math","round","minDelay","maxDelay","floor","random"],"sourceRoot":""}