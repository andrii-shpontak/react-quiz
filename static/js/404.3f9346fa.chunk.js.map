{"version":3,"file":"static/js/404.3f9346fa.chunk.js","mappings":"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","sources":["pages/Quiz/components/QuizPreview.tsx","shared/constants/LocalStorageKeys.ts","services/localStorageService.ts","pages/Quiz/components/QuestionCard.tsx","pages/Quiz/components/TimeRemaining.tsx","shared/hooks/useCountdown.ts","pages/Quiz/components/QuizInProcess.tsx","pages/Quiz/view/Quiz.tsx","pages/Quiz/hooks/useData.ts"],"sourcesContent":["import type { TQuizPreviewProps } from '../../../shared/types';\n\nconst QuizPreview = ({ quizInfo, startQuiz }: TQuizPreviewProps) => {\n  const { title, category, difficulty, timeLimit } = quizInfo;\n\n  return (\n    <div className='flex justify-center items-center mt-10'>\n      <div className='bg-white p-6 rounded-lg shadow-md border border-gray-200 w-96'>\n        <h2 className='text-2xl font-bold mb-4'>{title}</h2>\n        <p className='text-gray-700 mb-2'>Category: {category}</p>\n        <p className='text-gray-700 mb-2'>Difficulty: {difficulty}</p>\n        <p className='text-gray-700 mb-4'>Time limit: {timeLimit} minutes</p>\n        <button onClick={startQuiz} className='bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600'>\n          Start Quiz\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuizPreview;\n","export enum LocalStorageKeys {\n  Answers = 'answers',\n}\n","import { LocalStorageKeys } from '../shared/constants/LocalStorageKeys';\n\nexport class LocalStorageService {\n  public static setItem<T>(key: LocalStorageKeys, value: T): void {\n    return localStorage.setItem(key, convertDataForSaveStorage(value));\n  }\n\n  public static getItem(key: LocalStorageKeys): string | null {\n    return localStorage.getItem(key);\n  }\n\n  public static removeItem(key: LocalStorageKeys): void {\n    localStorage.removeItem(key);\n  }\n\n  public static clear(): void {\n    localStorage.clear();\n  }\n}\n\nfunction convertDataForSaveStorage<T>(value: T): string {\n  if (value === null && value === undefined) {\n    return '';\n  } else if (typeof value === 'string') {\n    return value;\n  } else {\n    return JSON.stringify(value);\n  }\n}\n","import type { QuestionCardProps, TAnswer, TAnswersObject } from '../../../shared/types';\nimport React, { useCallback, useState } from 'react';\n\nimport { LocalStorageKeys } from '../../../shared/constants/LocalStorageKeys';\nimport { LocalStorageService } from '../../../services/localStorageService';\n\nconst QuestionCard: React.FC<QuestionCardProps> = ({ question, questionNumber, totalQuestions, onNext, quizTitle }) => {\n  const [selectedOption, setSelectedOption] = useState<number | null>(null);\n  const [isConfirmed, setIsConfirmed] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [answers, setAnswers] = useState<TAnswer[]>([]);\n\n  const handleOptionChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const value = event.target.value;\n      if (!isConfirmed && !!value) {\n        setSelectedOption(Number(value));\n      }\n    },\n    [setSelectedOption, isConfirmed],\n  );\n\n  const handleConfirm = useCallback(() => {\n    if (selectedOption !== null) {\n      const correct = question.correct_answers.includes(selectedOption);\n      setIsCorrect(correct);\n      setIsConfirmed(true);\n      setAnswers(state => [...state, { questionId: questionNumber, answerId: selectedOption, correct }]);\n    }\n  }, [setIsConfirmed, setIsCorrect, question, selectedOption, setAnswers, questionNumber]);\n\n  const handleNextClick = useCallback(() => {\n    if (questionNumber === totalQuestions) {\n      const currentDate = new Date().toISOString().split('.')[0];\n      const storedAnswers = LocalStorageService.getItem(LocalStorageKeys.Answers);\n      const existingAnswers = storedAnswers ? (JSON.parse(storedAnswers) as TAnswersObject[]) : [];\n      const allAnswers = [...existingAnswers, { title: quizTitle, date: currentDate, answers: answers }];\n      console.log(allAnswers);\n      LocalStorageService.setItem(LocalStorageKeys.Answers, JSON.stringify(allAnswers));\n    }\n    onNext();\n    setSelectedOption(null);\n    setIsConfirmed(false);\n    setIsCorrect(false);\n  }, [answers, questionNumber, totalQuestions, onNext, quizTitle]);\n\n  return (\n    <div\n      className={`p-6 rounded-lg shadow-md border w-full max-w-xl mx-auto ${\n        isConfirmed ? (isCorrect ? 'bg-green-100' : 'bg-red-100') : 'bg-white'\n      } mb-6`}>\n      <h3 className='text-xl font-bold mb-4'>\n        Question {questionNumber} of {totalQuestions}\n      </h3>\n      <p className='text-gray-800 mb-4'>{question.text}</p>\n      <ul>\n        {question.options.map(option => (\n          <li key={option.id} className='mb-2'>\n            <label className='flex items-center cursor-pointer w-full'>\n              <span\n                className={`inline-block flex items-center p-2 border rounded-lg shadow-sm transition-colors ${\n                  selectedOption === option.id ? 'bg-gray-300' : 'bg-gray-100'\n                } ${\n                  isConfirmed ? (selectedOption === option.id ? (isCorrect ? 'bg-green-100' : 'bg-red-100') : '') : ''\n                } hover:bg-gray-200 w-full`}\n                style={{ pointerEvents: isConfirmed ? 'none' : 'auto' }}>\n                <input\n                  type='radio'\n                  name={`question-${question.id}`}\n                  value={option.id}\n                  checked={selectedOption === option.id}\n                  onChange={handleOptionChange}\n                  disabled={isConfirmed}\n                  className='mx-3'\n                />\n                {option.text}\n              </span>\n            </label>\n          </li>\n        ))}\n      </ul>\n      {!isConfirmed ? (\n        <button onClick={handleConfirm} className='bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 mt-4'>\n          Confirm\n        </button>\n      ) : (\n        <button onClick={handleNextClick} className='bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 mt-4'>\n          {questionNumber === totalQuestions ? 'Finish' : 'Next'}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default QuestionCard;\n","import type { TTimeRemainingProps } from '../../../shared/types';\nimport { useCountdown } from '../../../shared/hooks/useCountdown';\n\nconst TimeRemaining = ({ timeLimit, onStart, onStop }: TTimeRemainingProps) => {\n  const { minutesLeft, secondsLeft } = useCountdown(timeLimit);\n\n  return (\n    <div className='flex justify-center items-center mt-4'>\n      <div className='text-red-500 font-bold mb-4 text-2xl'>\n        Time remaining: {minutesLeft}:{secondsLeft < 10 ? `0${secondsLeft}` : secondsLeft}\n      </div>\n    </div>\n  );\n};\n\nexport default TimeRemaining;\n","import { useEffect, useState } from 'react';\n\nexport function useCountdown(minutes: number) {\n  const [timeLeft, setTimeLeft] = useState(minutes * 60);\n\n  useEffect(() => {\n    if (timeLeft <= 0) return;\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(prevTime => prevTime - 1);\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [timeLeft]);\n\n  const minutesLeft = Math.floor(timeLeft / 60);\n  const secondsLeft = timeLeft % 60;\n\n  return { minutesLeft, secondsLeft };\n}\n","import { useCallback, useMemo, useState } from 'react';\n\nimport QuestionCard from './QuestionCard';\nimport QuizPreview from './QuizPreview';\nimport type { TQuizInProcessProps } from '../../../shared/types';\nimport TimeRemaining from './TimeRemaining';\n\nconst QuizInProcess = ({ quizInfo }: TQuizInProcessProps) => {\n  const [quizStatus, setQuizStatus] = useState({ inProcess: 0 });\n  const currentQuestion = useMemo(\n    () => quizInfo.questions.find(question => question.id === quizStatus.inProcess),\n    [quizInfo, quizStatus.inProcess],\n  );\n\n  const onNext = useCallback(() => {\n    setQuizStatus(state => {\n      return { inProcess: state.inProcess + 1 };\n    });\n  }, []);\n\n  return (\n    <>\n      {!!quizStatus.inProcess && !!currentQuestion ? (\n        <>\n          <TimeRemaining timeLimit={quizInfo.timeLimit} onStart={() => {}} onStop={() => {}} />\n          <QuestionCard\n            question={currentQuestion}\n            onNext={onNext}\n            questionNumber={quizStatus.inProcess}\n            totalQuestions={quizInfo.questions.length}\n            quizTitle={quizInfo.title}\n          />\n        </>\n      ) : (\n        <QuizPreview quizInfo={quizInfo} startQuiz={onNext} />\n      )}\n    </>\n  );\n};\n\nexport default QuizInProcess;\n","import { Header, Loader } from '../../../shared/components';\n\nimport { QuizInProcess } from '../components';\nimport React from 'react';\nimport { RequestState } from '../../../shared/constants/RequestState';\nimport { useData } from '../hooks/useData';\nimport { useParams } from 'react-router-dom';\nimport { useQuizzesData } from '../../../shared/hooks/useQuizzesData';\n\nconst Quiz: React.FC = () => {\n  const { id } = useParams();\n  const { quizzesData, requestStatus } = useQuizzesData({});\n  const { currentQuiz } = useData({ id, data: quizzesData });\n\n  return (\n    <>\n      <Header title={!!id ? `Quiz #${id}` : ''} />\n      {requestStatus === RequestState.Pending && <Loader />}\n      {!!currentQuiz && <QuizInProcess quizInfo={currentQuiz} />}\n    </>\n  );\n};\n\nexport default Quiz;\n","import type { TQuiz, TQuizUseDataProps } from '../../../shared/types';\nimport { useEffect, useState } from 'react';\n\nexport function useData({ id, data }: TQuizUseDataProps) {\n  const [currentQuiz, setCurrentQuiz] = useState<TQuiz | null>(null);\n\n  useEffect(() => {\n    if (id && data && data.length > 0) {\n      const quiz = data.find(quiz => quiz.title === id);\n      !!quiz ? setCurrentQuiz(quiz) : console.error(`Quiz with id ${id} not found.`);\n    }\n  }, [data, id]);\n\n  return { currentQuiz };\n}\n"],"names":["_ref","quizInfo","startQuiz","title","category","difficulty","timeLimit","_jsx","className","children","_jsxs","onClick","LocalStorageKeys","LocalStorageService","setItem","key","value","localStorage","undefined","JSON","stringify","convertDataForSaveStorage","getItem","removeItem","clear","question","questionNumber","totalQuestions","onNext","quizTitle","selectedOption","setSelectedOption","useState","isConfirmed","setIsConfirmed","isCorrect","setIsCorrect","answers","setAnswers","handleOptionChange","useCallback","event","target","Number","handleConfirm","correct","correct_answers","includes","state","questionId","answerId","handleNextClick","currentDate","Date","toISOString","split","storedAnswers","Answers","allAnswers","parse","date","console","log","concat","text","options","map","option","id","style","pointerEvents","type","name","checked","onChange","disabled","onStart","onStop","minutesLeft","secondsLeft","minutes","timeLeft","setTimeLeft","useEffect","intervalId","setInterval","prevTime","clearInterval","Math","floor","useCountdown","quizStatus","setQuizStatus","inProcess","currentQuestion","useMemo","questions","find","_Fragment","TimeRemaining","QuestionCard","length","QuizPreview","Quiz","useParams","quizzesData","requestStatus","useQuizzesData","currentQuiz","data","setCurrentQuiz","quiz","error","useData","Header","RequestState","Pending","Loader","QuizInProcess"],"sourceRoot":""}